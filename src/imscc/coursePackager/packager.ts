import JSZip from "jszip";
import { Config, Course, ResourceModule, ResourcePage } from "../types";
import { DEFAULT_VERSION, Version } from "./versions";
import { ImsItem, ImsManifest, ImsResource } from "./manifest/types";
import { randomId } from "../common";
import { cssFromConfig } from "../resource/html";
import { addPage, pageResource } from "../resource";
import { manifestXml } from "./manifest/manifest";
import { moduleMetaTemplate } from "./moduleMeta/moduleMeta";

const moduleItem = (module: ResourceModule): ImsItem => ({
  identifier: randomId("MODULE"),
  title: module.title,
  items: module.pages.map(
    (page): ImsItem => ({
      identifier: randomId("PAGE"),
      title: page.title,
      identifierRef: page.id,
    })
  ),
});

const courseSetting = (courseTitle: string, courseSettingId: string) => `
<?xml version="1.0" encoding="UTF-8"?>
<course identifier="${courseSettingId}"
  xmlns="http://canvas.instructure.com/xsd/cccv1p0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://canvas.instructure.com/xsd/cccv1p0 https://canvas.instructure.com/xsd/cccv1p0.xsd">
  <title>${courseTitle}</title>
  <default_view>modules</default_view>
</course>`;

const fileMeta = `
<?xml version="1.0" encoding="UTF-8"?>
<fileMeta xmlns="http://canvas.instructure.com/xsd/cccv1p0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://canvas.instructure.com/xsd/cccv1p0 https://canvas.instructure.com/xsd/cccv1p0.xsd">
</fileMeta>`;

export const packageCourse = async (
  courseContent: Course,
  generatorComment: string = "Generated by IMSCC Packager",
  version: Version = DEFAULT_VERSION,
  options?: Config
): Promise<[JSZip, string]> => {
  const zip = new JSZip();

  const modules: ResourceModule[] = [];

  const contentFiles = new Set<string>();
  const attachmentFiles = new Set<string>();
  const activityFiles = new Set<string>();

  const globalDependencies: ImsResource[] = [];
  if (options?.cssMode === "stylesheet-link") {
    const css = cssFromConfig(options);
    const path = "web_resources/styles.css";
    zip.file(path, css);
    globalDependencies.push({
      identifier: randomId("CSS"),
      type: "webcontent",
      files: [
        {
          href: path,
        },
      ],
    });
  }

  courseContent.modules.forEach((module, i) => {
    const moduleNumber = i + 1;
    const modulePrefix = `module_${moduleNumber}`;

    modules.push({
      title: module.title,
      pages: module.pages.map((page) =>
        addPage(
          zip,
          page,
          modulePrefix,
          {
            content: contentFiles,
            attachments: attachmentFiles,
            activities: activityFiles,
          },
          globalDependencies,
          options
        )
      ),
    });
  });

  const resourcePages: ResourcePage[] = modules.reduce(
    (acc: ResourcePage[], module) => acc.concat(module.pages),
    []
  );
  const attachmentResources: ImsResource[] = resourcePages.reduce(
    (acc: ImsResource[], page): ImsResource[] =>
      acc.concat(
        page.attachments
          ? page.attachments.map((attachment): ImsResource => {
              const id = randomId("MEDIA");

              page.dependencies = page.dependencies || [];
              page.dependencies.push(id);
              return {
                identifier: id,
                type: "webcontent",
                files: [
                  {
                    href: attachment.filePath,
                  },
                ],
              };
            })
          : []
      ),
    []
  );

  const courseSettingResources: ImsResource = {
    identifier: randomId("COURSE_SETTINGS"),
    type: "associatedcontent/imscc_xmlv1p1/learning-application-resource",
    files: [
      {
        href: "course_settings/course_settings.xml",
      },
      {
        href: "course_settings/module_meta.xml",
      },
      {
        href: "course_settings/files_meta.xml",
      },
      {
        href: "course_settings/canvas_export.txt",
      },
    ],
  };
  const organizationModuleItem: ImsItem[] = modules.map(moduleItem);

  const resources = resourcePages
    .map(pageResource)
    .concat(attachmentResources)
    .concat(globalDependencies);

  resources.push(courseSettingResources);

  const manifest: ImsManifest = {
    generatorComment,
    identifier: randomId("COURSE"),
    metadata: {
      title: courseContent.title,
      description: courseContent.description,
      language: courseContent.language || "en",
      version,
    },
    organizations: [
      {
        identifier: randomId("NAV"),
        items: organizationModuleItem,
      },
    ],
    resources: resources,
  };

  // course_settings.xml (mostly empty placeholder)
  zip.file(
    "course_settings/course_settings.xml",
    courseSetting(courseContent.title, courseSettingResources.identifier)
  );

  // module_meta.xml (re-iterates the module layout)
  zip.file(
    "course_settings/module_meta.xml",
    moduleMetaTemplate(organizationModuleItem)
  );

  // files_meta.xml (mostly empty placeholder)
  zip.file("course_settings/files_meta.xml", fileMeta);

  // canvas_export.txt (doesn't matter what's in it)
  zip.file("course_settings/canvas_export.txt", "Exported from CourseMagic.ai");

  const manifestFileContents = manifestXml(manifest);
  zip.file("imsmanifest.xml", manifestFileContents);

  return [zip, manifestFileContents];
};
